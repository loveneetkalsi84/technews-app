"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState, useEffect } from "react";
import { 
  FaTachometerAlt, 
  FaNewspaper, 
  FaUsers, 
  FaComments, 
  FaChartBar, 
  FaCog, 
  FaBars,
  FaTimes,
  FaUserCircle,
  FaLayerGroup,
  FaRss,
  FaBookmark
} from "react-icons/fa";
import { useSession } from "next-auth/react";
import Image from "next/image";

type MenuItem = {
  name: string;
  path: string;
  icon: React.ReactNode;
  badge?: number;
  section?: string;
};

const menuItems: MenuItem[] = [
  { 
    name: "Dashboard", 
    path: "/admin", 
    icon: <FaTachometerAlt className="text-lg" />,
    section: "main"
  },
  { 
    name: "Articles", 
    path: "/admin/articles", 
    icon: <FaNewspaper className="text-lg" />, 
    badge: 3,
    section: "content" 
  },
  { 
    name: "Comments", 
    path: "/admin/comments", 
    icon: <FaComments className="text-lg" />, 
    badge: 5,
    section: "content" 
  },
  { 
    name: "Import", 
    path: "/admin/import", 
    icon: <FaRss className="text-lg" />,
    section: "content" 
  },
  { 
    name: "Categories", 
    path: "/admin/categories", 
    icon: <FaLayerGroup className="text-lg" />,
    section: "content" 
  },
  { 
    name: "Saved Drafts", 
    path: "/admin/drafts", 
    icon: <FaBookmark className="text-lg" />, 
    badge: 2,
    section: "content" 
  },
  { 
    name: "Users", 
    path: "/admin/users", 
    icon: <FaUsers className="text-lg" />,
    section: "management" 
  },
  { 
    name: "Analytics", 
    path: "/admin/analytics", 
    icon: <FaChartBar className="text-lg" />,
    section: "management" 
  },
  { 
    name: "Settings", 
    path: "/admin/settings", 
    icon: <FaCog className="text-lg" />,
    section: "management" 
  },
];

export default function DashboardSidebar() {
  const pathname = usePathname();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const { data: session } = useSession();
  
  // Close sidebar when clicking outside on mobile
  useEffect(() => {
    const handleOutsideClick = (event: MouseEvent) => {
      const sidebar = document.getElementById('sidebar');
      const hamburger = document.getElementById('hamburger-button');
      
      if (sidebar && hamburger && 
          !sidebar.contains(event.target as Node) && 
          !hamburger.contains(event.target as Node) &&
          window.innerWidth < 768 &&
          isMobileMenuOpen) {
        setIsMobileMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleOutsideClick);
    
    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [isMobileMenuOpen]);

  // Handle window resize
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth > 768) {
        setIsMobileMenuOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const getSectionMenuItems = (section: string) => {
    return menuItems.filter(item => item.section === section);
  };

  return (
    <>
      {/* Mobile menu button */}
      <div id="hamburger-button" className="fixed top-4 left-4 z-30 md:hidden">
        <button
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          className="p-3 rounded-full bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg hover:shadow-blue-500/20 transition-all"
          aria-label="Toggle menu"
        >
          {isMobileMenuOpen ? <FaTimes className="text-lg" /> : <FaBars className="text-lg" />}
        </button>
      </div>
      
      {/* Sidebar */}
      <div
        id="sidebar"
        className={`fixed inset-y-0 left-0 z-20 ${isCollapsed ? 'w-20' : 'w-72'} bg-gradient-to-b from-blue-600 to-blue-800 dark:from-gray-800 dark:to-gray-900 text-white transform transition-all duration-300 ease-in-out md:translate-x-0 ${
          isMobileMenuOpen ? "translate-x-0 shadow-2xl" : "-translate-x-full"
        } flex flex-col`}
      >
        {/* Logo */}
        <div className="p-4 border-b border-blue-500/50 dark:border-gray-700/50 flex justify-between items-center">
          <Link href="/" className={`flex items-center ${isCollapsed ? 'justify-center w-full' : 'space-x-2'}`}>
            {!isCollapsed ? (
              <>
                <span className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-blue-200">TechNews</span>
                <span className="bg-white/20 text-xs px-2 py-1 rounded text-white">Admin</span>
              </>
            ) : (
              <span className="text-2xl font-bold text-white">TN</span>
            )}
          </Link>
          
          {/* Collapse/expand button - only visible on desktop */}
          <button 
            className="hidden md:flex h-8 w-8 items-center justify-center text-blue-300 hover:text-white hover:bg-blue-700/50 dark:hover:bg-gray-700/70 rounded-lg transition-colors" 
            onClick={() => setIsCollapsed(!isCollapsed)}
            aria-label={isCollapsed ? "Expand sidebar" : "Collapse sidebar"}
          >
            {isCollapsed ? <FaBars /> : <FaTimes />}
          </button>
        </div>
        
        {/* Admin profile section */}
        <div className={`p-4 border-b border-blue-500/30 dark:border-gray-700/50 ${isCollapsed ? 'flex justify-center' : 'flex items-center space-x-3'}`}>
          <div className="relative">
            <div className="w-10 h-10 rounded-full bg-blue-500/30 dark:bg-gray-700 flex items-center justify-center overflow-hidden">
              {session?.user?.image ? (
                <Image 
                  src={session.user.image} 
                  alt="Profile" 
                  width={40} 
                  height={40} 
                  className="rounded-full" 
                />
              ) : (
                <FaUserCircle className="text-3xl text-white/80" />
              )}
            </div>
            <div className="absolute -top-1 -right-1 w-3.5 h-3.5 bg-green-400 rounded-full border-2 border-blue-700 dark:border-gray-800"></div>
          </div>
          
          {!isCollapsed && (
            <div className="flex-1 min-w-0 ml-1">
              <p className="text-sm font-medium text-white truncate">
                {session?.user?.name || "Admin User"}
              </p>
              <p className="text-xs text-blue-200 dark:text-gray-400 truncate">
                {session?.user?.email || "admin@example.com"}
              </p>
            </div>
          )}
        </div>
        
        {/* Menu items */}
        <nav className={`mt-2 ${isCollapsed ? 'px-2' : 'px-3'} flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-blue-500/50 dark:scrollbar-thumb-gray-700/50 scrollbar-track-transparent`}>
          {/* Main section */}
          <div className="space-y-1 mb-4">
            {getSectionMenuItems("main").map((item) => {
              const isActive = pathname === item.path || pathname.startsWith(`${item.path}/`);
              
              return (
                <Link
                  key={item.path}
                  href={item.path}
                  className={`group flex items-center ${isCollapsed ? 'justify-center' : ''} px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isActive
                      ? "bg-white/10 text-white shadow-sm backdrop-blur-sm border border-white/10"
                      : "text-blue-100 hover:bg-blue-700/50 dark:hover:bg-gray-800/70"
                  }`}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  <span className={`${isCollapsed ? '' : 'mr-3'} relative ${isActive ? 'text-white' : 'text-blue-200 group-hover:text-white'}`}>
                    {item.icon}
                    {item.badge && (
                      <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {item.badge}
                      </span>
                    )}
                  </span>
                  {!isCollapsed && item.name}
                </Link>
              );
            })}
          </div>

          {!isCollapsed && (
            <div className="mb-2">
              <h3 className="px-4 text-xs font-semibold text-blue-300 dark:text-gray-500 uppercase tracking-wider">
                Content
              </h3>
            </div>
          )}
          
          {/* Content section */}
          <div className="space-y-1 mb-4">
            {getSectionMenuItems("content").map((item) => {
              const isActive = pathname === item.path || pathname.startsWith(`${item.path}/`);
              
              return (
                <Link
                  key={item.path}
                  href={item.path}
                  className={`group flex items-center ${isCollapsed ? 'justify-center' : ''} px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isActive
                      ? "bg-white/10 text-white shadow-sm backdrop-blur-sm border border-white/10"
                      : "text-blue-100 hover:bg-blue-700/50 dark:hover:bg-gray-800/70"
                  }`}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  <span className={`${isCollapsed ? '' : 'mr-3'} relative ${isActive ? 'text-white' : 'text-blue-200 group-hover:text-white'}`}>
                    {item.icon}
                    {item.badge && (
                      <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {item.badge}
                      </span>
                    )}
                  </span>
                  {!isCollapsed && item.name}
                </Link>
              );
            })}
          </div>

          {!isCollapsed && (
            <div className="mb-2">
              <h3 className="px-4 text-xs font-semibold text-blue-300 dark:text-gray-500 uppercase tracking-wider">
                Management
              </h3>
            </div>
          )}
          
          {/* Management section */}
          <div className="space-y-1">
            {getSectionMenuItems("management").map((item) => {
              const isActive = pathname === item.path || pathname.startsWith(`${item.path}/`);
              
              return (
                <Link
                  key={item.path}
                  href={item.path}
                  className={`group flex items-center ${isCollapsed ? 'justify-center' : ''} px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isActive
                      ? "bg-white/10 text-white shadow-sm backdrop-blur-sm border border-white/10"
                      : "text-blue-100 hover:bg-blue-700/50 dark:hover:bg-gray-800/70"
                  }`}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  <span className={`${isCollapsed ? '' : 'mr-3'} relative ${isActive ? 'text-white' : 'text-blue-200 group-hover:text-white'}`}>
                    {item.icon}
                    {item.badge && (
                      <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {item.badge}
                      </span>
                    )}
                  </span>
                  {!isCollapsed && item.name}
                </Link>
              );
            })}
          </div>
        </nav>
        
        {/* Version info */}
        <div className={`p-4 border-t border-blue-500/30 dark:border-gray-700/50 ${isCollapsed ? 'flex flex-col items-center' : ''}`}>
          <div className={`flex items-center ${isCollapsed ? 'justify-center' : ''} text-xs text-blue-200 dark:text-gray-400 px-4 py-2`}>
            <span>TechNews v2.0</span>
          </div>
        </div>
      </div>
      
      {/* Overlay for mobile */}
      {isMobileMenuOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-10 md:hidden transition-opacity duration-300"
          onClick={() => setIsMobileMenuOpen(false)}
          aria-hidden="true"
        />
      )}
    </>
  );
}

  return (
    <>
      {/* Mobile menu button */}
      <div id="hamburger-button" className="fixed top-4 left-4 z-30 md:hidden">
        <button
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          className="p-3 rounded-full bg-blue-600 text-white shadow-lg hover:bg-blue-700 transition-all"
          aria-label="Toggle menu"
        >
          {isMobileMenuOpen ? <FaTimes className="text-lg" /> : <FaBars className="text-lg" />}
        </button>
      </div>      {/* Sidebar */}      <div
        id="sidebar"
        className={`fixed inset-y-0 left-0 z-20 ${isCollapsed ? 'w-20' : 'w-72'} bg-gradient-to-b from-blue-500 to-blue-600 dark:from-blue-700 dark:to-blue-800 text-white transform transition-all duration-300 ease-in-out md:translate-x-0 ${
          isMobileMenuOpen ? "translate-x-0 shadow-2xl" : "-translate-x-full"
        } flex flex-col`}
      >        {/* Logo */}
        <div className="p-4 border-b border-blue-400 dark:border-blue-600 flex justify-between items-center">
          <Link href="/" className={`flex items-center ${isCollapsed ? 'justify-center w-full' : 'space-x-2'}`}>
            {!isCollapsed ? (
              <>
                <span className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-400">TechNews</span>
                <span className="bg-gradient-to-r from-blue-500 to-purple-500 text-xs px-2 py-1 rounded">Admin</span>
              </>
            ) : (
              <span className="text-2xl font-bold">TN</span>
            )}
          </Link>
          
          {/* Collapse/expand button - only visible on desktop */}
          <button 
            className="hidden md:block text-blue-300 hover:text-white transition-colors" 
            onClick={() => setIsCollapsed(!isCollapsed)}
            aria-label={isCollapsed ? "Expand sidebar" : "Collapse sidebar"}
          >
            {isCollapsed ? <FaBars /> : <FaTimes />}
          </button>
        </div>        {/* Admin profile section */}
        <div className={`p-4 border-b border-blue-400 dark:border-blue-600 ${isCollapsed ? 'flex justify-center' : 'flex items-center space-x-3'}`}>
          <div className="relative">
            {session?.user?.image ? (
              <Image 
                src={session.user.image} 
                alt="Profile" 
                width={40} 
                height={40} 
                className="rounded-full border-2 border-blue-400" 
              />
            ) : (
              <FaUserCircle className="text-3xl text-white/70" />
            )}
            <div className="absolute -top-1 -right-1 w-3.5 h-3.5 bg-green-400 rounded-full border-2 border-blue-500 dark:border-blue-700"></div>
          </div>
          
          {!isCollapsed && (
            <div className="flex-1 min-w-0 ml-2">
              <p className="text-sm font-medium text-white truncate">
                {session?.user?.name || "Admin User"}
              </p>
              <p className="text-xs text-blue-300 truncate">
                {session?.user?.email || "admin@example.com"}
              </p>
            </div>
          )}
        </div>        {/* Menu items */}
        <nav className={`mt-5 ${isCollapsed ? 'px-1' : 'px-3'} flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-blue-500 dark:scrollbar-thumb-blue-700`}>
          <div className="space-y-1">
            {menuItems.map((item) => {
              const isActive = pathname === item.path || pathname.startsWith(`${item.path}/`);
              
              return (
                <Link
                  key={item.path}
                  href={item.path}                  className={`group flex items-center ${isCollapsed ? 'justify-center' : ''} px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isActive
                      ? "bg-gradient-to-r from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-800 text-white shadow-md"
                      : "text-blue-100 hover:bg-blue-500/50 dark:hover:bg-blue-600/50"
                  }`}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  <span className={`${isCollapsed ? '' : 'mr-3'} relative`}>
                    {item.icon}
                    {item.badge && (
                      <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {item.badge}
                      </span>
                    )}
                  </span>
                  {!isCollapsed && item.name}
                </Link>
              );            })}
          </div>
        </nav>
        
        {/* Version info */}
        <div className={`p-4 border-t border-blue-500/30 dark:border-gray-700/50 ${isCollapsed ? 'flex flex-col items-center' : ''}`}>
          <div className={`flex items-center ${isCollapsed ? 'justify-center' : ''} text-xs text-blue-200 dark:text-gray-400 px-4 py-2`}>
            <span>TechNews v2.0</span>
          </div>
        </div>
      </div>
      
      {/* Overlay for mobile */}
      {isMobileMenuOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-10 md:hidden transition-opacity duration-300"
          onClick={() => setIsMobileMenuOpen(false)}
          aria-hidden="true"
        />
      )}
    </>
  );
}
          className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-10 md:hidden transition-opacity duration-300"
          onClick={() => setIsMobileMenuOpen(false)}
          aria-hidden="true"
        />
      )}
    </>
  );
}
