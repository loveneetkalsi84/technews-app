"use client";

import { useState, useEffect } from "react";
import { useSession, signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { NextResponse } from "next/server";
import { 
  FaSave, 
  FaTimes, 
  FaImage, 
  FaEye,
  FaArrowLeft,
  FaHashtag, 
  FaFolder
} from "react-icons/fa";

// Form data persistence key in localStorage
const FORM_STORAGE_KEY = 'technews_article_draft';

export default function NewArticlePage() {
  const { data: session, status, update: updateSession } = useSession();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [savingStep, setSavingStep] = useState('');
  const [isPreview, setIsPreview] = useState(false);
  const [error, setError] = useState("");
  const [autosaveEnabled, setAutosaveEnabled] = useState(true);
  
  // Function to ensure session is valid
  const ensureValidSession = async () => {
    if (status !== "authenticated") {
      // Redirect to login if not authenticated
      router.push("/login?callbackUrl=/admin/articles/new");
      return false;
    }
    
    try {
      // Attempt to update the session to refresh tokens if needed
      await updateSession();
      
      // Double-check that we still have a valid session after update
      if (status !== "authenticated" || !session || !session.user) {
        console.warn("Session validation failed after update");
        return false;
      }
      
      // Verify the user has admin role
      if ((session.user as any).role !== "admin") {
        console.warn("User does not have admin role");
        router.push("/unauthorized");
        return false;
      }
      
      console.log("Session validated successfully", { 
        userId: session.user.id,
        role: (session.user as any).role 
      });
      return true;
    } catch (error) {
      console.error("Failed to refresh session:", error);
      return false;
    }
  };

  const [formData, setFormData] = useState({
    title: "",
    slug: "",
    content: "",
    excerpt: "",
    category: "News",
    coverImage: "",
    tags: "",
    status: "draft",
    metaDescription: "",
    metaKeywords: ""
  });
  
  // Load saved form data from localStorage on initial render
  useEffect(() => {
    const savedFormData = localStorage.getItem(FORM_STORAGE_KEY);
    if (savedFormData) {
      try {
        const parsedData = JSON.parse(savedFormData);
        setFormData(parsedData);
        console.log('Form data restored from localStorage');
      } catch (error) {
        console.error('Failed to parse saved form data:', error);
      }
    }
  }, []);
  
  // Save form data to localStorage whenever it changes (with debounce)
  useEffect(() => {
    if (!autosaveEnabled) return;
    
    const autosaveTimeout = setTimeout(() => {
      localStorage.setItem(FORM_STORAGE_KEY, JSON.stringify(formData));
      console.log('Form data auto-saved to localStorage');
    }, 1000);
    
    return () => clearTimeout(autosaveTimeout);
  }, [formData, autosaveEnabled]);
  
  // Available categories
  const categories = ["News", "Reviews", "Features", "Tutorials"];

  // Protected route - check for auth and admin role
  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/login?callbackUrl=/admin/articles/new");
    } else if (status === "authenticated") {
      if ((session.user as any).role !== "admin") {
        router.push("/unauthorized");
      } else {
        setIsLoading(false);
      }
    }
  }, [status, session, router]);

  // Handle form input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // If title is changed, auto-generate a slug (unless slug was manually edited)
    if (name === "title" && !formData.slug) {
      const generatedSlug = value.toLowerCase()
        .replace(/[^\w\s]/gi, '')
        .replace(/\s+/g, '-');
      
      setFormData({
        ...formData,
        [name]: value,
        slug: generatedSlug
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  // Function to validate the form data
  const validateForm = (): { isValid: boolean; errorMessage?: string } => {
    // Check for required fields
    if (!formData.title.trim()) {
      return { isValid: false, errorMessage: "Article title is required" };
    }
    
    if (!formData.content.trim()) {
      return { isValid: false, errorMessage: "Article content is required" };
    }
    
    if (!formData.slug.trim()) {
      return { isValid: false, errorMessage: "URL slug is required" };
    }
    
    // Validate slug format (only alphanumeric chars, hyphens, no spaces)
    const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;
    if (!slugRegex.test(formData.slug.trim())) {
      return { 
        isValid: false, 
        errorMessage: "URL slug can only contain lowercase letters, numbers, and hyphens. It cannot start or end with a hyphen." 
      };
    }
    
    // Check if content is too short (minimum 100 characters)
    if (formData.content.trim().length < 100) {
      return { 
        isValid: false, 
        errorMessage: "Article content is too short. Please provide at least 100 characters." 
      };
    }
    
    // Check if title is too short (minimum 10 characters)
    if (formData.title.trim().length < 10) {
      return { 
        isValid: false, 
        errorMessage: "Article title is too short. Please provide at least 10 characters." 
      };
    }
    
    // Validate image URL if provided
    if (formData.coverImage && !formData.coverImage.startsWith('http')) {
      return { 
        isValid: false, 
        errorMessage: "Cover image URL must start with http:// or https://" 
      };
    }
    
    // All validations passed
    return { isValid: true };
  };
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);
    setError('');
    
    const validation = validateForm();
    if (!validation.isValid) {
      setError(validation.errorMessage || 'Form validation failed');
      setIsSaving(false);
      return;
    }
    
    try {
      // Process form data to match API expectations
      const processedFormData = {
        ...formData,
        // Convert comma-separated tags to an array
        tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [],
        // Convert comma-separated metaKeywords to an array
        metaKeywords: formData.metaKeywords ? formData.metaKeywords.split(',').map(keyword => keyword.trim()) : [],
        // Set isPublished based on status
        isPublished: formData.status === 'published',
      };
      
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || '';
      const response = await fetch(`${baseUrl}/api/articles`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(processedFormData),
        credentials: 'include',
      });
      
      // Check if the response is OK (status in the range 200-299)
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
        throw new Error(errorData.message || `Error: ${response.status} ${response.statusText}`);
      }
      
      // Process successful response
      const data = await response.json();
      router.push('/admin/articles');
    } catch (err: any) {
      setError(err.message || 'An error occurred while saving the article');
      console.error('Error creating article:', err);
    } finally {
      setIsSaving(false);
    }
  };

  // Toggle between edit and preview modes
  const togglePreview = () => {
    setIsPreview(!isPreview);
  };

  // Clear saved draft from localStorage
  const clearSavedDraft = () => {
    if (window.confirm("Are you sure you want to clear the saved draft? This cannot be undone.")) {
      localStorage.removeItem(FORM_STORAGE_KEY);
      setFormData({
        title: "",
        slug: "",
        content: "",
        excerpt: "",
        category: "News",
        coverImage: "",
        tags: "",
        status: "draft",
        metaDescription: "",
        metaKeywords: ""
      });
      
      // Show confirmation message
      const confirmMessage = document.createElement('div');
      confirmMessage.className = 'fixed top-4 right-4 bg-green-50 border-l-4 border-green-500 p-4 rounded-lg shadow-lg z-50 animate-slide-in-right';
      confirmMessage.innerHTML = `
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 000-16 8 8 000 16zm3.707-9.293a1 1 000-1.414-1.414L9 10.586 7.707 9.293a1 1 00-1.414 1.414l2 2a1 1 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-green-700">Draft has been cleared</p>
          </div>
        </div>
      `;
      document.body.appendChild(confirmMessage);
      
      setTimeout(() => {
        confirmMessage.classList.add('animate-fade-out');
        setTimeout(() => {
          if (document.body.contains(confirmMessage)) {
            document.body.removeChild(confirmMessage);
          }
        }, 300);
      }, 3000);
    }
  };
  
  // Toggle autosave functionality
  const toggleAutosave = () => {
    setAutosaveEnabled(!autosaveEnabled);
    
    // Store the preference in localStorage
    localStorage.setItem('technews_autosave_preference', (!autosaveEnabled).toString());
    
    // Show notification about the change
    const message = !autosaveEnabled ? 'Autosave enabled' : 'Autosave disabled';
    const notifClass = !autosaveEnabled ? 'bg-green-50 border-green-500' : 'bg-yellow-50 border-yellow-500';
    const textColor = !autosaveEnabled ? 'text-green-700' : 'text-yellow-700';
    const iconColor = !autosaveEnabled ? 'text-green-600' : 'text-yellow-600';
    
    const notif = document.createElement('div');
    notif.className = `fixed top-4 right-4 ${notifClass} border-l-4 p-4 rounded-lg shadow-lg z-50 animate-slide-in-right`;
    notif.innerHTML = `
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 ${iconColor}" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 000-16 8 8 000 16zm3.707-9.293a1 1 000-1.414-1.414L9 10.586 7.707 9.293a1 1 00-1.414 1.414l2 2a1 1 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm ${textColor}">${message}</p>
        </div>
      </div>
    `;
    document.body.appendChild(notif);
    
    setTimeout(() => {
      notif.classList.add('animate-fade-out');
      setTimeout(() => {
        if (document.body.contains(notif)) {
          document.body.removeChild(notif);
        }
      }, 300);
    }, 2000);
  };

  if (status === "loading" || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="p-6 md:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-8">
          <div>
            <div className="flex items-center">
              <div className="h-10 w-1.5 rounded-full bg-blue-600 dark:bg-blue-500 mr-4"></div>
              <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">Create New Article</h1>
            </div>
            <p className="text-gray-600 dark:text-gray-400 mt-2 ml-5.5">Create and publish a new article</p>
          </div>
          <div className="mt-6 md:mt-0 flex flex-wrap gap-3">
            <Link
              href="/admin/articles"
              className="inline-flex items-center bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-medium py-2.5 px-5 rounded-lg shadow-sm hover:shadow transition-all duration-200"
            >
              <FaArrowLeft className="mr-2" />
              Back to Articles
            </Link>
          </div>
        </div>

        {/* Error notification */}
        {error && (
          <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-lg dark:bg-red-900/30 dark:border-red-500/70">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-600 dark:text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 000-16 8 8 000 16zM8.707 7.293a1 1 000-1.414 1.414L8.586 10l-1.293 1.293a1 1 001.414 1.414L10 11.414l1.293 1.293a1 1 001.414-1.414L11.414 10l1.293-1.293a1 1 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd"/>
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700 dark:text-red-300">{error}</p>
              </div>
              <div className="ml-auto pl-3">
                <div className="-mx-1.5 -my-1.5">
                  <button
                    type="button"
                    onClick={() => setError("")}
                    className="inline-flex rounded-md p-1.5 text-red-500 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900 focus:outline-none"
                  >
                    <span className="sr-only">Dismiss</span>
                    <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M4.293 4.293a1 1 011.414 0L10 8.586l4.293-4.293a1 1 011.414 1.414L11.414 10l4.293 4.293a1 1 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 01-1.414-1.414L8.586 10 4.293 5.707a1 1 010-1.414z" clipRule="evenodd"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Form */}
        <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md border border-gray-100 dark:border-gray-700">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Rest of the form content */}
          </div>
        </form>
      </div>
    </div>
  );
}
